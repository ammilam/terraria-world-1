gcloud beta compute --project=$DEVSHELL_PROJECT_ID instance-templates create $NAME-template --machine-type=n1-standard-1 --subnet=projects/$DEVSHELL_PROJECT_ID/regions/$REGION/subnetworks/default --network-tier=PREMIUM --metadata=^,@^kubelet-config=apiVersion:\ kubelet.config.k8s.io/v1beta1$'\n'authentication:$'\n'\ \ anonymous:$'\n'\ \ \ \ enabled:\ false$'\n'\ \ webhook:$'\n'\ \ \ \ enabled:\ true$'\n'\ \ x509:$'\n'\ \ \ \ clientCAFile:\ /etc/srv/kubernetes/pki/ca-certificates.crt$'\n'authorization:$'\n'\ \ mode:\ Webhook$'\n'cgroupRoot:\ /$'\n'clusterDNS:$'\n'-\ 10.39.240.10$'\n'clusterDomain:\ cluster.local$'\n'enableDebuggingHandlers:\ true$'\n'evictionHard:$'\n'\ \ memory.available:\ 100Mi$'\n'\ \ nodefs.available:\ 10\%$'\n'\ \ nodefs.inodesFree:\ 5\%$'\n'\ \ pid.available:\ 10\%$'\n'featureGates:$'\n'\ \ DynamicKubeletConfig:\ false$'\n'\ \ ExperimentalCriticalPodAnnotation:\ true$'\n'\ \ RotateKubeletServerCertificate:\ true$'\n'\ \ TaintBasedEvictions:\ false$'\n'kind:\ KubeletConfiguration$'\n'kubeReserved:$'\n'\ \ cpu:\ 60m$'\n'\ \ ephemeral-storage:\ 41Gi$'\n'\ \ memory:\ 960Mi$'\n'readOnlyPort:\ 10255$'\n'serverTLSBootstrap:\ true$'\n'staticPodPath:\ /etc/kubernetes/manifests$'\n',@kube-labels=beta.kubernetes.io/fluentd-ds-ready=true,cloud.google.com/gke-nodepool=default-pool,cloud.google.com/gke-os-distribution=ubuntu,@disable-legacy-endpoints=true,@cluster-name=terraria-world-1,@configure-sh=\#\!/usr/bin/env\ bash$'\n'$'\n'\#\ Copyright\ 2016\ The\ Kubernetes\ Authors.$'\n'\#$'\n'\#\ Licensed\ under\ the\ Apache\ License,\ Version\ 2.0\ \(the\ \"License\"\)\;$'\n'\#\ you\ may\ not\ use\ this\ file\ except\ in\ compliance\ with\ the\ License.$'\n'\#\ You\ may\ obtain\ a\ copy\ of\ the\ License\ at$'\n'\#$'\n'\#\ \ \ \ \ http://www.apache.org/licenses/LICENSE-2.0$'\n'\#$'\n'\#\ Unless\ required\ by\ applicable\ law\ or\ agreed\ to\ in\ writing,\ software$'\n'\#\ distributed\ under\ the\ License\ is\ distributed\ on\ an\ \"AS\ IS\"\ BASIS,$'\n'\#\ WITHOUT\ WARRANTIES\ OR\ CONDITIONS\ OF\ ANY\ KIND,\ either\ express\ or\ implied.$'\n'\#\ See\ the\ License\ for\ the\ specific\ language\ governing\ permissions\ and$'\n'\#\ limitations\ under\ the\ License.$'\n'$'\n'\#\ Due\ to\ the\ GCE\ custom\ metadata\ size\ limit,\ we\ split\ the\ entire\ script\ into\ two$'\n'\#\ files\ configure.sh\ and\ configure-helper.sh.\ The\ functionality\ of\ downloading$'\n'\#\ kubernetes\ configuration,\ manifests,\ docker\ images,\ and\ binary\ files\ are$'\n'\#\ put\ in\ configure.sh,\ which\ is\ uploaded\ via\ GCE\ custom\ metadata.$'\n'$'\n'set\ -o\ errexit$'\n'set\ -o\ nounset$'\n'set\ -o\ pipefail$'\n'$'\n'\#\#\#\ Hardcoded\ constants$'\n'DEFAULT_CNI_VERSION=\"v0.7.5\"$'\n'DEFAULT_CNI_SHA1=\"52e9d2de8a5f927307d9397308735658ee44ab8d\"$'\n'DEFAULT_NPD_VERSION=\"v0.6.3\"$'\n'DEFAULT_NPD_SHA1=\"3a6ac56be6c121f1b94450bfd1a81ad28d532369\"$'\n'DEFAULT_CRICTL_VERSION=\"v1.14.0\"$'\n'DEFAULT_CRICTL_SHA1=\"1f93c6183d0a4e186708efe7899da7a7bce9c736\"$'\n'DEFAULT_MOUNTER_TAR_SHA=\"8003b798cf33c7f91320cd6ee5cec4fa22244571\"$'\n'\#\#\#$'\n'$'\n'\#\ Use\ --retry-connrefused\ opt\ only\ if\ it\'s\ supported\ by\ curl.$'\n'CURL_RETRY_CONNREFUSED=\"\"$'\n'if\ curl\ --help\ \|\ grep\ -q\ --\ \'--retry-connrefused\'\;\ then$'\n'\ \ CURL_RETRY_CONNREFUSED=\'--retry-connrefused\'$'\n'fi$'\n'$'\n'function\ set-broken-motd\ \{$'\n'\ \ cat\ \>\ /etc/motd\ \<\<EOF$'\n'Broken\ \(or\ in\ progress\)\ Kubernetes\ node\ setup\!\ Check\ the\ cluster\ initialization\ status$'\n'using\ the\ following\ commands.$'\n'$'\n'Master\ instance:$'\n'\ \ -\ sudo\ systemctl\ status\ kube-master-installation$'\n'\ \ -\ sudo\ systemctl\ status\ kube-master-configuration$'\n'$'\n'Node\ instance:$'\n'\ \ -\ sudo\ systemctl\ status\ kube-node-installation$'\n'\ \ -\ sudo\ systemctl\ status\ kube-node-configuration$'\n'EOF$'\n'\}$'\n'$'\n'function\ download-kube-env\ \{$'\n'\ \ \#\ Fetch\ kube-env\ from\ GCE\ metadata\ server.$'\n'\ \ \($'\n'\ \ \ \ umask\ 077$'\n'\ \ \ \ local\ -r\ tmp_kube_env=\"/tmp/kube-env.yaml\"$'\n'\ \ \ \ curl\ --fail\ --retry\ 5\ --retry-delay\ 3\ \$\{CURL_RETRY_CONNREFUSED\}\ --silent\ --show-error\ \\$'\n'\ \ \ \ \ \ -H\ \"X-Google-Metadata-Request:\ True\"\ \\$'\n'\ \ \ \ \ \ -o\ \"\$\{tmp_kube_env\}\"\ \\$'\n'\ \ \ \ \ \ http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env$'\n'\ \ \ \ \#\ Convert\ the\ yaml\ format\ file\ into\ a\ shell-style\ file.$'\n'\ \ \ \ eval\ \$\(python\ -c\ \'\'\'$'\n'import\ pipes,sys,yaml$'\n'for\ k,v\ in\ yaml.load\(sys.stdin\).iteritems\(\):$'\n'\ \ print\(\"readonly\ \{var\}=\{value\}\".format\(var\ =\ k,\ value\ =\ pipes.quote\(str\(v\)\)\)\)$'\n'\'\'\'\ \<\ \"\$\{tmp_kube_env\}\"\ \>\ \"\$\{KUBE_HOME\}/kube-env\"\)$'\n'\ \ \ \ rm\ -f\ \"\$\{tmp_kube_env\}\"$'\n'\ \ \)$'\n'\}$'\n'$'\n'function\ download-kubelet-config\ \{$'\n'\ \ local\ -r\ dest=\"\$1\"$'\n'\ \ echo\ \"Downloading\ Kubelet\ config\ file,\ if\ it\ exists\"$'\n'\ \ \#\ Fetch\ kubelet\ config\ file\ from\ GCE\ metadata\ server.$'\n'\ \ \($'\n'\ \ \ \ umask\ 077$'\n'\ \ \ \ local\ -r\ tmp_kubelet_config=\"/tmp/kubelet-config.yaml\"$'\n'\ \ \ \ if\ curl\ --fail\ --retry\ 5\ --retry-delay\ 3\ \$\{CURL_RETRY_CONNREFUSED\}\ --silent\ --show-error\ \\$'\n'\ \ \ \ \ \ \ \ -H\ \"X-Google-Metadata-Request:\ True\"\ \\$'\n'\ \ \ \ \ \ \ \ -o\ \"\$\{tmp_kubelet_config\}\"\ \\$'\n'\ \ \ \ \ \ \ \ http://metadata.google.internal/computeMetadata/v1/instance/attributes/kubelet-config\;\ then$'\n'\ \ \ \ \ \ \#\ only\ write\ to\ the\ final\ location\ if\ curl\ succeeds$'\n'\ \ \ \ \ \ mv\ \"\$\{tmp_kubelet_config\}\"\ \"\$\{dest\}\"$'\n'\ \ \ \ elif\ \[\[\ \"\$\{REQUIRE_METADATA_KUBELET_CONFIG_FILE:-false\}\"\ ==\ \"true\"\ \]\]\;\ then$'\n'\ \ \ \ \ \ echo\ \"==\ Failed\ to\ download\ required\ Kubelet\ config\ file\ from\ metadata\ server\ ==\"$'\n'\ \ \ \ \ \ exit\ 1$'\n'\ \ \ \ fi$'\n'\ \ \)$'\n'\}$'\n'$'\n'function\ download-kube-master-certs\ \{$'\n'\ \ \#\ Fetch\ kube-env\ from\ GCE\ metadata\ server.$'\n'\ \ \($'\n'\ \ \ \ umask\ 077$'\n'\ \ \ \ local\ -r\ tmp_kube_master_certs=\"/tmp/kube-master-certs.yaml\"$'\n'\ \ \ \ curl\ --fail\ --retry\ 5\ --retry-delay\ 3\ \$\{CURL_RETRY_CONNREFUSED\}\ --silent\ --show-error\ \\$'\n'\ \ \ \ \ \ -H\ \"X-Google-Metadata-Request:\ True\"\ \\$'\n'\ \ \ \ \ \ -o\ \"\$\{tmp_kube_master_certs\}\"\ \\$'\n'\ \ \ \ \ \ http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-master-certs$'\n'\ \ \ \ \#\ Convert\ the\ yaml\ format\ file\ into\ a\ shell-style\ file.$'\n'\ \ \ \ eval\ \$\(python\ -c\ \'\'\'$'\n'import\ pipes,sys,yaml$'\n'for\ k,v\ in\ yaml.load\(sys.stdin\).iteritems\(\):$'\n'\ \ print\(\"readonly\ \{var\}=\{value\}\".format\(var\ =\ k,\ value\ =\ pipes.quote\(str\(v\)\)\)\)$'\n'\'\'\'\ \<\ \"\$\{tmp_kube_master_certs\}\"\ \>\ \"\$\{KUBE_HOME\}/kube-master-certs\"\)$'\n'\ \ \ \ rm\ -f\ \"\$\{tmp_kube_master_certs\}\"$'\n'\ \ \)$'\n'\}$'\n'$'\n'function\ validate-hash\ \{$'\n'\ \ local\ -r\ file=\"\$1\"$'\n'\ \ local\ -r\ expected=\"\$2\"$'\n'$'\n'\ \ actual=\$\(sha1sum\ \$\{file\}\ \|\ awk\ \'\{\ print\ \$1\ \}\'\)\ \|\|\ true$'\n'\ \ if\ \[\[\ \"\$\{actual\}\"\ \!=\ \"\$\{expected\}\"\ \]\]\;\ then$'\n'\ \ \ \ echo\ \"==\ \$\{file\}\ corrupted,\ sha1\ \$\{actual\}\ doesn\'t\ match\ expected\ \$\{expected\}\ ==\"$'\n'\ \ \ \ return\ 1$'\n'\ \ fi$'\n'\}$'\n'$'\n'\#\ Get\ default\ service\ account\ credentials\ of\ the\ VM.$'\n'GCE_METADATA_INTERNAL=\"http://metadata.google.internal/computeMetadata/v1/instance\"$'\n'function\ get-credentials\ \{$'\n'\ \ curl\ \"\$\{GCE_METADATA_INTERNAL\}/service-accounts/default/token\"\ -H\ \"Metadata-Flavor:\ Google\"\ -s\ \|\ python\ -c\ \\$'\n'\ \ \ \ \'import\ sys\;\ import\ json\;\ print\(json.loads\(sys.stdin.read\(\)\)\[\"access_token\"\]\)\'$'\n'\}$'\n'$'\n'function\ valid-storage-scope\ \{$'\n'\ \ curl\ --fail\ --retry\ 5\ --retry-delay\ 3\ \$\{CURL_RETRY_CONNREFUSED\}\ --silent\ --show-error\ \"\$\{GCE_METADATA_INTERNAL\}/service-accounts/default/scopes\"\ -H\ \"Metadata-Flavor:\ Google\"\ -s\ \|\ grep\ -E\ \"auth/devstorage\|auth/cloud-platform\"$'\n'\}$'\n'$'\n'\#\ Retry\ a\ download\ until\ we\ get\ it.\ Takes\ a\ hash\ and\ a\ set\ of\ URLs.$'\n'\#$'\n'\#\ \$1\ is\ the\ sha1\ of\ the\ URL.\ Can\ be\ \"\"\ if\ the\ sha1\ is\ unknown.$'\n'\#\ \$2\+\ are\ the\ URLs\ to\ download.$'\n'function\ download-or-bust\ \{$'\n'\ \ local\ -r\ hash=\"\$1\"$'\n'\ \ shift\ 1$'\n'$'\n'\ \ local\ -r\ urls=\(\ \$\*\ \)$'\n'\ \ while\ true\;\ do$'\n'\ \ \ \ for\ url\ in\ \"\$\{urls\[@\]\}\"\;\ do$'\n'\ \ \ \ \ \ local\ file=\"\$\{url\#\#\*/\}\"$'\n'\ \ \ \ \ \ rm\ -f\ \"\$\{file\}\"$'\n'\ \ \ \ \ \ \#\ if\ the\ url\ belongs\ to\ GCS\ API\ we\ should\ use\ oauth2_token\ in\ the\ headers$'\n'\ \ \ \ \ \ local\ curl_headers=\"\"$'\n'\ \ \ \ \ \ if\ \[\[\ \"\$url\"\ =\~\ ^https://storage.googleapis.com.\*\ \]\]\ \&\&\ valid-storage-scope\ \;\ then$'\n'\ \ \ \ \ \ \ \ curl_headers=\"Authorization:\ Bearer\ \$\(get-credentials\)\"$'\n'\ \ \ \ \ \ fi$'\n'\ \ \ \ \ \ if\ \!\ curl\ \$\{curl_headers:\+-H\ \"\$\{curl_headers\}\"\}\ -f\ --ipv4\ -Lo\ \"\$\{file\}\"\ --connect-timeout\ 20\ --max-time\ 300\ --retry\ 6\ --retry-delay\ 10\ \$\{CURL_RETRY_CONNREFUSED\}\ \"\$\{url\}\"\;\ then$'\n'\ \ \ \ \ \ \ \ echo\ \"==\ Failed\ to\ download\ \$\{url\}.\ Retrying.\ ==\"$'\n'\ \ \ \ \ \ elif\ \[\[\ -n\ \"\$\{hash\}\"\ \]\]\ \&\&\ \!\ validate-hash\ \"\$\{file\}\"\ \"\$\{hash\}\"\;\ then$'\n'\ \ \ \ \ \ \ \ echo\ \"==\ Hash\ validation\ of\ \$\{url\}\ failed.\ Retrying.\ ==\"$'\n'\ \ \ \ \ \ else$'\n'\ \ \ \ \ \ \ \ if\ \[\[\ -n\ \"\$\{hash\}\"\ \]\]\;\ then$'\n'\ \ \ \ \ \ \ \ \ \ echo\ \"==\ Downloaded\ \$\{url\}\ \(SHA1\ =\ \$\{hash\}\)\ ==\"$'\n'\ \ \ \ \ \ \ \ else$'\n'\ \ \ \ \ \ \ \ \ \ echo\ \"==\ Downloaded\ \$\{url\}\ ==\"$'\n'\ \ \ \ \ \ \ \ fi$'\n'\ \ \ \ \ \ \ \ return$'\n'\ \ \ \ \ \ fi$'\n'\ \ \ \ done$'\n'\ \ done$'\n'\}$'\n'$'\n'function\ is-preloaded\ \{$'\n'\ \ local\ -r\ key=\$1$'\n'\ \ local\ -r\ value=\$2$'\n'\ \ grep\ -qs\ \"\$\{key\},\$\{value\}\"\ \"\$\{KUBE_HOME\}/preload_info\"$'\n'\}$'\n'$'\n'function\ split-commas\ \{$'\n'\ \ echo\ \$1\ \|\ tr\ \",\"\ \"\\n\"$'\n'\}$'\n'$'\n'function\ remount-flexvolume-directory\ \{$'\n'\ \ local\ -r\ flexvolume_plugin_dir=\$1$'\n'\ \ mkdir\ -p\ \$flexvolume_plugin_dir$'\n'\ \ mount\ --bind\ \$flexvolume_plugin_dir\ \$flexvolume_plugin_dir$'\n'\ \ mount\ -o\ remount,exec\ \$flexvolume_plugin_dir$'\n'\}$'\n'$'\n'function\ install-gci-mounter-tools\ \{$'\n'\ \ CONTAINERIZED_MOUNTER_HOME=\"\$\{KUBE_HOME\}/containerized_mounter\"$'\n'\ \ local\ -r\ mounter_tar_sha=\"\$\{DEFAULT_MOUNTER_TAR_SHA\}\"$'\n'\ \ if\ is-preloaded\ \"mounter\"\ \"\$\{mounter_tar_sha\}\"\;\ then$'\n'\ \ \ \ echo\ \"mounter\ is\ preloaded.\"$'\n'\ \ \ \ return$'\n'\ \ fi$'\n'$'\n'\ \ echo\ \"Downloading\ gci\ mounter\ tools.\"$'\n'\ \ mkdir\ -p\ \"\$\{CONTAINERIZED_MOUNTER_HOME\}\"$'\n'\ \ chmod\ a\+x\ \"\$\{CONTAINERIZED_MOUNTER_HOME\}\"$'\n'\ \ mkdir\ -p\ \"\$\{CONTAINERIZED_MOUNTER_HOME\}/rootfs\"$'\n'\ \ download-or-bust\ \"\$\{mounter_tar_sha\}\"\ \"https://storage.googleapis.com/kubernetes-release/gci-mounter/mounter.tar\"$'\n'\ \ cp\ \"\$\{KUBE_HOME\}/kubernetes/server/bin/mounter\"\ \"\$\{CONTAINERIZED_MOUNTER_HOME\}/mounter\"$'\n'\ \ chmod\ a\+x\ \"\$\{CONTAINERIZED_MOUNTER_HOME\}/mounter\"$'\n'\ \ mv\ \"\$\{KUBE_HOME\}/mounter.tar\"\ /tmp/mounter.tar$'\n'\ \ tar\ xf\ /tmp/mounter.tar\ -C\ \"\$\{CONTAINERIZED_MOUNTER_HOME\}/rootfs\"$'\n'\ \ rm\ /tmp/mounter.tar$'\n'\ \ mkdir\ -p\ \"\$\{CONTAINERIZED_MOUNTER_HOME\}/rootfs/var/lib/kubelet\"$'\n'\}$'\n'$'\n'\#\ Install\ node\ problem\ detector\ binary.$'\n'function\ install-node-problem-detector\ \{$'\n'\ \ if\ \[\[\ -n\ \"\$\{NODE_PROBLEM_DETECTOR_VERSION:-\}\"\ \]\]\;\ then$'\n'\ \ \ \ \ \ local\ -r\ npd_version=\"\$\{NODE_PROBLEM_DETECTOR_VERSION\}\"$'\n'\ \ \ \ \ \ local\ -r\ npd_sha1=\"\$\{NODE_PROBLEM_DETECTOR_TAR_HASH\}\"$'\n'\ \ else$'\n'\ \ \ \ \ \ local\ -r\ npd_version=\"\$\{DEFAULT_NPD_VERSION\}\"$'\n'\ \ \ \ \ \ local\ -r\ npd_sha1=\"\$\{DEFAULT_NPD_SHA1\}\"$'\n'\ \ fi$'\n'\ \ local\ -r\ npd_tar=\"node-problem-detector-\$\{npd_version\}.tar.gz\"$'\n'$'\n'\ \ if\ is-preloaded\ \"\$\{npd_tar\}\"\ \"\$\{npd_sha1\}\"\;\ then$'\n'\ \ \ \ echo\ \"\$\{npd_tar\}\ is\ preloaded.\"$'\n'\ \ \ \ return$'\n'\ \ fi$'\n'$'\n'\ \ echo\ \"Downloading\ \$\{npd_tar\}.\"$'\n'\ \ local\ -r\ npd_release_path=\"\$\{NODE_PROBLEM_DETECTOR_RELEASE_PATH:-https://storage.googleapis.com/kubernetes-release\}\"$'\n'\ \ download-or-bust\ \"\$\{npd_sha1\}\"\ \"\$\{npd_release_path\}/node-problem-detector/\$\{npd_tar\}\"$'\n'\ \ local\ -r\ npd_dir=\"\$\{KUBE_HOME\}/node-problem-detector\"$'\n'\ \ mkdir\ -p\ \"\$\{npd_dir\}\"$'\n'\ \ tar\ xzf\ \"\$\{KUBE_HOME\}/\$\{npd_tar\}\"\ -C\ \"\$\{npd_dir\}\"\ --overwrite$'\n'\ \ mv\ \"\$\{npd_dir\}/bin\"/\*\ \"\$\{KUBE_BIN\}\"$'\n'\ \ chmod\ a\+x\ \"\$\{KUBE_BIN\}/node-problem-detector\"$'\n'\ \ rmdir\ \"\$\{npd_dir\}/bin\"$'\n'\ \ rm\ -f\ \"\$\{KUBE_HOME\}/\$\{npd_tar\}\"$'\n'\}$'\n'$'\n'function\ install-cni-binaries\ \{$'\n'\ \ if\ \[\[\ -n\ \"\$\{CNI_VERSION:-\}\"\ \]\]\;\ then$'\n'\ \ \ \ \ \ local\ -r\ cni_tar=\"\$\{CNI_TAR_PREFIX\}\$\{CNI_VERSION\}.tgz\"$'\n'\ \ \ \ \ \ local\ -r\ cni_sha1=\"\$\{CNI_SHA1\}\"$'\n'\ \ else$'\n'\ \ \ \ \ \ local\ -r\ cni_tar=\"\$\{CNI_TAR_PREFIX\}\$\{DEFAULT_CNI_VERSION\}.tgz\"$'\n'\ \ \ \ \ \ local\ -r\ cni_sha1=\"\$\{DEFAULT_CNI_SHA1\}\"$'\n'\ \ fi$'\n'\ \ if\ is-preloaded\ \"\$\{cni_tar\}\"\ \"\$\{cni_sha1\}\"\;\ then$'\n'\ \ \ \ echo\ \"\$\{cni_tar\}\ is\ preloaded.\"$'\n'\ \ \ \ return$'\n'\ \ fi$'\n'$'\n'\ \ echo\ \"Downloading\ cni\ binaries\"$'\n'\ \ download-or-bust\ \"\$\{cni_sha1\}\"\ \"\$\{CNI_STORAGE_PATH\}/\$\{cni_tar\}\"$'\n'\ \ local\ -r\ cni_dir=\"\$\{KUBE_HOME\}/cni\"$'\n'\ \ mkdir\ -p\ \"\$\{cni_dir\}/bin\"$'\n'\ \ tar\ xzf\ \"\$\{KUBE_HOME\}/\$\{cni_tar\}\"\ -C\ \"\$\{cni_dir\}/bin\"\ --overwrite$'\n'\ \ mv\ \"\$\{cni_dir\}/bin\"/\*\ \"\$\{KUBE_BIN\}\"$'\n'\ \ rmdir\ \"\$\{cni_dir\}/bin\"$'\n'\ \ rm\ -f\ \"\$\{KUBE_HOME\}/\$\{cni_tar\}\"$'\n'\}$'\n'$'\n'\#\ Install\ crictl\ binary.$'\n'function\ install-crictl\ \{$'\n'\ \ if\ \[\[\ -n\ \"\$\{CRICTL_VERSION:-\}\"\ \]\]\;\ then$'\n'\ \ \ \ local\ -r\ crictl_version=\"\$\{CRICTL_VERSION\}\"$'\n'\ \ \ \ local\ -r\ crictl_sha1=\"\$\{CRICTL_TAR_HASH\}\"$'\n'\ \ else$'\n'\ \ \ \ local\ -r\ crictl_version=\"\$\{DEFAULT_CRICTL_VERSION\}\"$'\n'\ \ \ \ local\ -r\ crictl_sha1=\"\$\{DEFAULT_CRICTL_SHA1\}\"$'\n'\ \ fi$'\n'\ \ local\ -r\ crictl=\"crictl-\$\{crictl_version\}-linux-amd64\"$'\n'$'\n'\ \ \#\ Create\ crictl\ config\ file.$'\n'\ \ cat\ \>\ /etc/crictl.yaml\ \<\<EOF$'\n'runtime-endpoint:\ \$\{CONTAINER_RUNTIME_ENDPOINT:-unix:///var/run/dockershim.sock\}$'\n'EOF$'\n'$'\n'\ \ if\ is-preloaded\ \"\$\{crictl\}\"\ \"\$\{crictl_sha1\}\"\;\ then$'\n'\ \ \ \ echo\ \"crictl\ is\ preloaded\"$'\n'\ \ \ \ return$'\n'\ \ fi$'\n'$'\n'\ \ echo\ \"Downloading\ crictl\"$'\n'\ \ local\ -r\ crictl_path=\"https://storage.googleapis.com/kubernetes-release/crictl\"$'\n'\ \ download-or-bust\ \"\$\{crictl_sha1\}\"\ \"\$\{crictl_path\}/\$\{crictl\}\"$'\n'\ \ mv\ \"\$\{KUBE_HOME\}/\$\{crictl\}\"\ \"\$\{KUBE_BIN\}/crictl\"$'\n'\ \ chmod\ a\+x\ \"\$\{KUBE_BIN\}/crictl\"$'\n'\}$'\n'$'\n'function\ install-exec-auth-plugin\ \{$'\n'\ \ if\ \[\[\ \!\ \"\$\{EXEC_AUTH_PLUGIN_URL:-\}\"\ \]\]\;\ then$'\n'\ \ \ \ \ \ return$'\n'\ \ fi$'\n'\ \ local\ -r\ plugin_url=\"\$\{EXEC_AUTH_PLUGIN_URL\}\"$'\n'\ \ local\ -r\ plugin_sha1=\"\$\{EXEC_AUTH_PLUGIN_SHA1\}\"$'\n'$'\n'\ \ echo\ \"Downloading\ gke-exec-auth-plugin\ binary\"$'\n'\ \ download-or-bust\ \"\$\{plugin_sha1\}\"\ \"\$\{plugin_url\}\"$'\n'\ \ mv\ \"\$\{KUBE_HOME\}/gke-exec-auth-plugin\"\ \"\$\{KUBE_BIN\}/gke-exec-auth-plugin\"$'\n'\ \ chmod\ a\+x\ \"\$\{KUBE_BIN\}/gke-exec-auth-plugin\"$'\n'$'\n'\ \ if\ \[\[\ \!\ \"\$\{EXEC_AUTH_PLUGIN_LICENSE_URL:-\}\"\ \]\]\;\ then$'\n'\ \ \ \ \ \ return$'\n'\ \ fi$'\n'\ \ local\ -r\ license_url=\"\$\{EXEC_AUTH_PLUGIN_LICENSE_URL\}\"$'\n'\ \ echo\ \"Downloading\ gke-exec-auth-plugin\ license\"$'\n'\ \ download-or-bust\ \"\"\ \"\$\{license_url\}\"$'\n'\ \ mv\ \"\$\{KUBE_HOME\}/LICENSE\"\ \"\$\{KUBE_BIN\}/gke-exec-auth-plugin-license\"$'\n'\}$'\n'$'\n'function\ install-kube-manifests\ \{$'\n'\ \ \#\ Put\ kube-system\ pods\ manifests\ in\ \$\{KUBE_HOME\}/kube-manifests/.$'\n'\ \ local\ dst_dir=\"\$\{KUBE_HOME\}/kube-manifests\"$'\n'\ \ mkdir\ -p\ \"\$\{dst_dir\}\"$'\n'\ \ local\ -r\ manifests_tar_urls=\(\ \$\(split-commas\ \"\$\{KUBE_MANIFESTS_TAR_URL\}\"\)\ \)$'\n'\ \ local\ -r\ manifests_tar=\"\$\{manifests_tar_urls\[0\]\#\#\*/\}\"$'\n'\ \ if\ \[\ -n\ \"\$\{KUBE_MANIFESTS_TAR_HASH:-\}\"\ \]\;\ then$'\n'\ \ \ \ local\ -r\ manifests_tar_hash=\"\$\{KUBE_MANIFESTS_TAR_HASH\}\"$'\n'\ \ else$'\n'\ \ \ \ echo\ \"Downloading\ k8s\ manifests\ sha1\ \(not\ found\ in\ env\)\"$'\n'\ \ \ \ download-or-bust\ \"\"\ \"\$\{manifests_tar_urls\[@\]/.tar.gz/.tar.gz.sha1\}\"$'\n'\ \ \ \ local\ -r\ manifests_tar_hash=\$\(cat\ \"\$\{manifests_tar\}.sha1\"\)$'\n'\ \ fi$'\n'$'\n'\ \ if\ is-preloaded\ \"\$\{manifests_tar\}\"\ \"\$\{manifests_tar_hash\}\"\;\ then$'\n'\ \ \ \ echo\ \"\$\{manifests_tar\}\ is\ preloaded.\"$'\n'\ \ \ \ return$'\n'\ \ fi$'\n'$'\n'\ \ echo\ \"Downloading\ k8s\ manifests\ tar\"$'\n'\ \ download-or-bust\ \"\$\{manifests_tar_hash\}\"\ \"\$\{manifests_tar_urls\[@\]\}\"$'\n'\ \ tar\ xzf\ \"\$\{KUBE_HOME\}/\$\{manifests_tar\}\"\ -C\ \"\$\{dst_dir\}\"\ --overwrite$'\n'\ \ local\ -r\ kube_addon_registry=\"\$\{KUBE_ADDON_REGISTRY:-k8s.gcr.io\}\"$'\n'\ \ if\ \[\[\ \"\$\{kube_addon_registry\}\"\ \!=\ \"k8s.gcr.io\"\ \]\]\;\ then$'\n'\ \ \ \ find\ \"\$\{dst_dir\}\"\ -name\ \\\*.yaml\ -or\ -name\ \\\*.yaml.in\ \|\ \\$'\n'\ \ \ \ \ \ xargs\ sed\ -ri\ \"s@\(image:\\s.\*\)k8s.gcr.io@\\1\$\{kube_addon_registry\}@\"$'\n'\ \ \ \ find\ \"\$\{dst_dir\}\"\ -name\ \\\*.manifest\ -or\ -name\ \\\*.json\ \|\ \\$'\n'\ \ \ \ \ \ xargs\ sed\ -ri\ \"s@\(image\\\":\\s\+\\\"\)k8s.gcr.io@\\1\$\{kube_addon_registry\}@\"$'\n'\ \ fi$'\n'\ \ cp\ \"\$\{dst_dir\}/kubernetes/gci-trusty/gci-configure-helper.sh\"\ \"\$\{KUBE_BIN\}/configure-helper.sh\"$'\n'\ \ if\ \[\[\ -e\ \"\$\{dst_dir\}/kubernetes/gci-trusty/gke-internal-configure.sh\"\ \]\]\;\ then$'\n'\ \ \ \ cp\ \"\$\{dst_dir\}/kubernetes/gci-trusty/gke-internal-configure.sh\"\ \"\$\{KUBE_BIN\}/\"$'\n'\ \ fi$'\n'\ \ if\ \[\[\ -e\ \"\$\{dst_dir\}/kubernetes/gci-trusty/gke-internal-configure-helper.sh\"\ \]\]\;\ then$'\n'\ \ \ \ cp\ \"\$\{dst_dir\}/kubernetes/gci-trusty/gke-internal-configure-helper.sh\"\ \"\$\{KUBE_BIN\}/\"$'\n'\ \ fi$'\n'$'\n'\ \ cp\ \"\$\{dst_dir\}/kubernetes/gci-trusty/health-monitor.sh\"\ \"\$\{KUBE_BIN\}/health-monitor.sh\"$'\n'$'\n'\ \ rm\ -f\ \"\$\{KUBE_HOME\}/\$\{manifests_tar\}\"$'\n'\ \ rm\ -f\ \"\$\{KUBE_HOME\}/\$\{manifests_tar\}.sha1\"$'\n'\}$'\n'$'\n'\#\ A\ helper\ function\ for\ loading\ a\ docker\ image.\ It\ keeps\ trying\ up\ to\ 5\ times.$'\n'\#$'\n'\#\ \$1:\ Full\ path\ of\ the\ docker\ image$'\n'function\ try-load-docker-image\ \{$'\n'\ \ local\ -r\ img=\$1$'\n'\ \ echo\ \"Try\ to\ load\ docker\ image\ file\ \$\{img\}\"$'\n'\ \ \#\ Temporarily\ turn\ off\ errexit,\ because\ we\ don\'t\ want\ to\ exit\ on\ first\ failure.$'\n'\ \ set\ \+e$'\n'\ \ local\ -r\ max_attempts=5$'\n'\ \ local\ -i\ attempt_num=1$'\n'\ \ until\ timeout\ 30\ \$\{LOAD_IMAGE_COMMAND:-docker\ load\ -i\}\ \"\$\{img\}\"\;\ do$'\n'\ \ \ \ if\ \[\[\ \"\$\{attempt_num\}\"\ ==\ \"\$\{max_attempts\}\"\ \]\]\;\ then$'\n'\ \ \ \ \ \ echo\ \"Fail\ to\ load\ docker\ image\ file\ \$\{img\}\ after\ \$\{max_attempts\}\ retries.\ Exit\!\!\"$'\n'\ \ \ \ \ \ exit\ 1$'\n'\ \ \ \ else$'\n'\ \ \ \ \ \ attempt_num=\$\(\(attempt_num\+1\)\)$'\n'\ \ \ \ \ \ sleep\ 5$'\n'\ \ \ \ fi$'\n'\ \ done$'\n'\ \ \#\ Re-enable\ errexit.$'\n'\ \ set\ -e$'\n'\}$'\n'$'\n'\#\ Loads\ kube-system\ docker\ images.\ It\ is\ better\ to\ do\ it\ before\ starting\ kubelet,$'\n'\#\ as\ kubelet\ will\ restart\ docker\ daemon,\ which\ may\ interfere\ with\ loading\ images.$'\n'function\ load-docker-images\ \{$'\n'\ \ echo\ \"Start\ loading\ kube-system\ docker\ images\"$'\n'\ \ local\ -r\ img_dir=\"\$\{KUBE_HOME\}/kube-docker-files\"$'\n'\ \ if\ \[\[\ \"\$\{KUBERNETES_MASTER:-\}\"\ ==\ \"true\"\ \]\]\;\ then$'\n'\ \ \ \ try-load-docker-image\ \"\$\{img_dir\}/kube-apiserver.tar\"$'\n'\ \ \ \ try-load-docker-image\ \"\$\{img_dir\}/kube-controller-manager.tar\"$'\n'\ \ \ \ try-load-docker-image\ \"\$\{img_dir\}/kube-scheduler.tar\"$'\n'\ \ else$'\n'\ \ \ \ try-load-docker-image\ \"\$\{img_dir\}/kube-proxy.tar\"$'\n'\ \ fi$'\n'\}$'\n'$'\n'\#\ Downloads\ kubernetes\ binaries\ and\ kube-system\ manifest\ tarball,\ unpacks\ them,$'\n'\#\ and\ places\ them\ into\ suitable\ directories.\ Files\ are\ placed\ in\ /home/kubernetes.$'\n'function\ install-kube-binary-config\ \{$'\n'\ \ cd\ \"\$\{KUBE_HOME\}\"$'\n'\ \ local\ -r\ server_binary_tar_urls=\(\ \$\(split-commas\ \"\$\{SERVER_BINARY_TAR_URL\}\"\)\ \)$'\n'\ \ local\ -r\ server_binary_tar=\"\$\{server_binary_tar_urls\[0\]\#\#\*/\}\"$'\n'\ \ if\ \[\[\ -n\ \"\$\{SERVER_BINARY_TAR_HASH:-\}\"\ \]\]\;\ then$'\n'\ \ \ \ local\ -r\ server_binary_tar_hash=\"\$\{SERVER_BINARY_TAR_HASH\}\"$'\n'\ \ else$'\n'\ \ \ \ echo\ \"Downloading\ binary\ release\ sha1\ \(not\ found\ in\ env\)\"$'\n'\ \ \ \ download-or-bust\ \"\"\ \"\$\{server_binary_tar_urls\[@\]/.tar.gz/.tar.gz.sha1\}\"$'\n'\ \ \ \ local\ -r\ server_binary_tar_hash=\$\(cat\ \"\$\{server_binary_tar\}.sha1\"\)$'\n'\ \ fi$'\n'$'\n'\ \ if\ is-preloaded\ \"\$\{server_binary_tar\}\"\ \"\$\{server_binary_tar_hash\}\"\;\ then$'\n'\ \ \ \ echo\ \"\$\{server_binary_tar\}\ is\ preloaded.\"$'\n'\ \ else$'\n'\ \ \ \ echo\ \"Downloading\ binary\ release\ tar\"$'\n'\ \ \ \ download-or-bust\ \"\$\{server_binary_tar_hash\}\"\ \"\$\{server_binary_tar_urls\[@\]\}\"$'\n'\ \ \ \ tar\ xzf\ \"\$\{KUBE_HOME\}/\$\{server_binary_tar\}\"\ -C\ \"\$\{KUBE_HOME\}\"\ --overwrite$'\n'\ \ \ \ \#\ Copy\ docker_tag\ and\ image\ files\ to\ \$\{KUBE_HOME\}/kube-docker-files.$'\n'\ \ \ \ local\ -r\ src_dir=\"\$\{KUBE_HOME\}/kubernetes/server/bin\"$'\n'\ \ \ \ local\ dst_dir=\"\$\{KUBE_HOME\}/kube-docker-files\"$'\n'\ \ \ \ mkdir\ -p\ \"\$\{dst_dir\}\"$'\n'\ \ \ \ cp\ \"\$\{src_dir\}/\"\*.docker_tag\ \"\$\{dst_dir\}\"$'\n'\ \ \ \ if\ \[\[\ \"\$\{KUBERNETES_MASTER:-\}\"\ ==\ \"false\"\ \]\]\;\ then$'\n'\ \ \ \ \ \ cp\ \"\$\{src_dir\}/kube-proxy.tar\"\ \"\$\{dst_dir\}\"$'\n'\ \ \ \ else$'\n'\ \ \ \ \ \ cp\ \"\$\{src_dir\}/kube-apiserver.tar\"\ \"\$\{dst_dir\}\"$'\n'\ \ \ \ \ \ cp\ \"\$\{src_dir\}/kube-controller-manager.tar\"\ \"\$\{dst_dir\}\"$'\n'\ \ \ \ \ \ cp\ \"\$\{src_dir\}/kube-scheduler.tar\"\ \"\$\{dst_dir\}\"$'\n'\ \ \ \ \ \ cp\ -r\ \"\$\{KUBE_HOME\}/kubernetes/addons\"\ \"\$\{dst_dir\}\"$'\n'\ \ \ \ fi$'\n'\ \ \ \ load-docker-images$'\n'\ \ \ \ mv\ \"\$\{src_dir\}/kubelet\"\ \"\$\{KUBE_BIN\}\"$'\n'\ \ \ \ mv\ \"\$\{src_dir\}/kubectl\"\ \"\$\{KUBE_BIN\}\"$'\n'$'\n'\ \ \ \ mv\ \"\$\{KUBE_HOME\}/kubernetes/LICENSES\"\ \"\$\{KUBE_HOME\}\"$'\n'\ \ \ \ mv\ \"\$\{KUBE_HOME\}/kubernetes/kubernetes-src.tar.gz\"\ \"\$\{KUBE_HOME\}\"$'\n'\ \ fi$'\n'$'\n'\ \ if\ \[\[\ \"\$\{NETWORK_PROVIDER:-\}\"\ ==\ \"kubenet\"\ \]\]\ \|\|\ \\$'\n'\ \ \ \ \ \[\[\ \"\$\{NETWORK_PROVIDER:-\}\"\ ==\ \"cni\"\ \]\]\;\ then$'\n'\ \ \ \ install-cni-binaries$'\n'\ \ fi$'\n'$'\n'\ \ \#\ Put\ kube-system\ pods\ manifests\ in\ \$\{KUBE_HOME\}/kube-manifests/.$'\n'\ \ install-kube-manifests$'\n'\ \ chmod\ -R\ 755\ \"\$\{KUBE_BIN\}\"$'\n'$'\n'\ \ \#\ Install\ gci\ mounter\ related\ artifacts\ to\ allow\ mounting\ storage\ volumes\ in\ GCI$'\n'\ \ install-gci-mounter-tools$'\n'$'\n'\ \ \#\ Remount\ the\ Flexvolume\ directory\ with\ the\ \"exec\"\ option,\ if\ needed.$'\n'\ \ if\ \[\[\ \"\$\{REMOUNT_VOLUME_PLUGIN_DIR:-\}\"\ ==\ \"true\"\ \&\&\ -n\ \"\$\{VOLUME_PLUGIN_DIR:-\}\"\ \]\]\;\ then$'\n'\ \ \ \ remount-flexvolume-directory\ \"\$\{VOLUME_PLUGIN_DIR\}\"$'\n'\ \ fi$'\n'$'\n'\ \ \#\ Install\ crictl\ on\ each\ node.$'\n'\ \ install-crictl$'\n'$'\n'\ \ \#\ TODO\(awly\):\ include\ the\ binary\ and\ license\ in\ the\ OS\ image.$'\n'\ \ install-exec-auth-plugin$'\n'$'\n'\ \ \#\ Source\ GKE\ specific\ scripts.$'\n'\ \ \#$'\n'\ \ \#\ This\ must\ be\ done\ after\ install-kube-manifests\ where\ the$'\n'\ \ \#\ gke-internal-configure.sh\ is\ downloaded.$'\n'\ \ if\ \[\[\ -e\ \"\$\{KUBE_HOME\}/bin/gke-internal-configure.sh\"\ \]\]\;\ then$'\n'\ \ \ \ echo\ \"Running\ GKE\ internal\ configuration\ script\ gke-internal-configure.sh\"$'\n'\ \ \ \ .\ \"\$\{KUBE_HOME\}/bin/gke-internal-configure.sh\"$'\n'\ \ fi$'\n'$'\n'\ \ if\ \[\[\ \"\$\{KUBERNETES_MASTER:-\}\"\ ==\ \"false\"\ \]\]\ \&\&\ \\$'\n'\ \ \ \ \ \[\[\ \"\$\{ENABLE_NODE_PROBLEM_DETECTOR:-\}\"\ ==\ \"standalone\"\ \]\]\;\ then$'\n'\ \ \ \ install-node-problem-detector$'\n'\ \ \ \ if\ \[\[\ -e\ \"\$\{KUBE_HOME\}/bin/gke-internal-configure.sh\"\ \]\]\;\ then$'\n'\ \ \ \ \ \ install-npd-custom-plugins$'\n'\ \ \ \ fi$'\n'\ \ fi$'\n'$'\n'\ \ \#\ Clean\ up.$'\n'\ \ rm\ -rf\ \"\$\{KUBE_HOME\}/kubernetes\"$'\n'\ \ rm\ -f\ \"\$\{KUBE_HOME\}/\$\{server_binary_tar\}\"$'\n'\ \ rm\ -f\ \"\$\{KUBE_HOME\}/\$\{server_binary_tar\}.sha1\"$'\n'\}$'\n'$'\n'\#\#\#\#\#\#\#\#\#\ Main\ Function\ \#\#\#\#\#\#\#\#\#\#$'\n'echo\ \"Start\ to\ install\ kubernetes\ files\"$'\n'\#\ if\ install\ fails,\ message-of-the-day\ \(motd\)\ will\ warn\ at\ login\ shell$'\n'set-broken-motd$'\n'$'\n'KUBE_HOME=\"/home/kubernetes\"$'\n'KUBE_BIN=\"\$\{KUBE_HOME\}/bin\"$'\n'$'\n'\#\ download\ and\ source\ kube-env$'\n'download-kube-env$'\n'source\ \"\$\{KUBE_HOME\}/kube-env\"$'\n'$'\n'download-kubelet-config\ \"\$\{KUBE_HOME\}/kubelet-config.yaml\"$'\n'$'\n'\#\ master\ certs$'\n'if\ \[\[\ \"\$\{KUBERNETES_MASTER:-\}\"\ ==\ \"true\"\ \]\]\;\ then$'\n'\ \ download-kube-master-certs$'\n'fi$'\n'$'\n'\#\ binaries\ and\ kube-system\ manifests$'\n'install-kube-binary-config$'\n'$'\n'echo\ \"Done\ for\ installing\ kubernetes\ files\"$'\n',@kube-env=ALLOCATE_NODE_CIDRS:\ \"true\"$'\n'API_SERVER_TEST_LOG_LEVEL:\ --v=3$'\n'AUTOSCALER_ENV_VARS:\ kube_reserved=cpu=60m,memory=960Mi,ephemeral-storage=41Gi\;node_labels=beta.kubernetes.io/fluentd-ds-ready=true,cloud.google.com/gke-nodepool=default-pool,cloud.google.com/gke-os-distribution=ubuntu$'\n'CA_CERT:\ LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLakNDQWhLZ0F3SUJBZ0lRVUZRQkFRTS84UFNMeDNmbHZRWkErakFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlReFlqVTNNbUl6WVMwME0yVmxMVFE0TkRNdE9HTTJNaTA0T0RZek5XRmxObUpoTURJdwpIaGNOTWpBd09ERXdNRE14TnpFMVdoY05NalV3T0RBNU1EUXhOekUxV2pBdk1TMHdLd1lEVlFRREV5UXhZalUzCk1tSXpZUzAwTTJWbExUUTRORE10T0dNMk1pMDRPRFl6TldGbE5tSmhNREl3Z2dFaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUR3NXdnMVBBK0lXeWtnckQwbDl1MVBESmRYUDA1dmh3QzRhVzRVb0tRZAowRFFpVm51NC9WTC9QazhnVmNKaSswcDNHRnN6dTBXVHJLYS9UeHBtdjJsUDhWY0c4aHIzUGxsVUlxRHo1MUZoCkVuakRSYWpqZWFkUnhhaG5iNE1Ld1EvaXZ0d01nTGNCaE1ESnlMM2pDUzU2QnpROFRKbU5jWlpoRGpyM1ZpMFQKVVVZNlgvaW4vQSt1cUpKMlpmc0k0QWdhMHhaNGdzK01INzJweEs4aWU3M21xNGZCNVgvUFRuZXhSZGJIT3lVaQo1Q2dJUnNDVE5nRW5nZzdQMmo4NEwrY0xJRmtVdjBzS3owSGlubTl4bG13MmtKNG5HSGovQXQyQzZJb3ZVUnlHCmdjYkRKdWhuN2VFbUlRdjk4V3VwMnNQZ1A4elFEZEs4MlpUQ1hrV3BDaThQQWdNQkFBR2pRakJBTUE0R0ExVWQKRHdFQi93UUVBd0lDQkRBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXQkJTaW0ramU5MXNZQ0ZjcApkUzRYMGozdHY1NFZpakFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBNEdRR3NIVS9wZndQbm44YXJQa2ZMRVdwClBSZXVGMHQyNk1tbkxVTzVsc3Q5TWFKTEJCcXRvSW0zU2xLWVVMYWoxRGRFaW9HNFQ1bUdEcUphSFI1L2JZTFYKNzc4Rndiczd2TlNDcjV0RjVocmlOR1JZUHdwclZZMElqcnVuenhkdTd5VHpkRnRmemc4MHJ0VERTM1plQ3VJVgpzblNSaVZoNG9aOGFFWVRRV0pnb0oxQ1ZsMHNRUGZlOHJOSTN5NzZmeTZKRTUvdDRFR3RaSG84dStsYThlOGtUCk4rcm9LZkc4V09MOG9kekd6WCtOVjdhUHQwekltaS9mTmFtU2ZIb0RseTg2MTZOYkM5NWtSdlV5SWdwWFdYQUgKZWYyM0FPalZ3VTh0WWZiT2c3VVI0VmJTd0laMUxoa1ErSXlPWlNJVmw2UGZLVmIydDRtOEFYQjF4SHVvVmc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==$'\n'CLUSTER_IP_RANGE:\ 10.36.0.0/14$'\n'CLUSTER_NAME:\ terraria-world-1$'\n'CNI_SHA1:\ dcbeba8d6be7a49e399bda6b8b638d312eace876$'\n'CNI_STORAGE_PATH:\ https://storage.googleapis.com/gke-release/cni-plugins/v0.8.5-gke.1$'\n'CNI_STORAGE_URL_BASE:\ https://storage.googleapis.com/gke-release/cni-plugins$'\n'CNI_TAR_PREFIX:\ cni-plugins-linux-amd64-$'\n'CNI_VERSION:\ v0.8.5-gke.1$'\n'CREATE_BOOTSTRAP_KUBECONFIG:\ \"true\"$'\n'DNS_DOMAIN:\ cluster.local$'\n'DNS_SERVER_IP:\ 10.39.240.10$'\n'DOCKER_REGISTRY_MIRROR_URL:\ https://mirror.gcr.io$'\n'ELASTICSEARCH_LOGGING_REPLICAS:\ \"1\"$'\n'ENABLE_CLUSTER_DNS:\ \"true\"$'\n'ENABLE_CLUSTER_LOGGING:\ \"false\"$'\n'ENABLE_CLUSTER_MONITORING:\ none$'\n'ENABLE_CLUSTER_REGISTRY:\ \"false\"$'\n'ENABLE_CLUSTER_UI:\ \"true\"$'\n'ENABLE_L7_LOADBALANCING:\ glbc$'\n'ENABLE_METADATA_AGENT:\ \"\"$'\n'ENABLE_METRICS_SERVER:\ \"true\"$'\n'ENABLE_NODE_LOGGING:\ \"false\"$'\n'ENABLE_NODE_PROBLEM_DETECTOR:\ standalone$'\n'ENABLE_NODELOCAL_DNS:\ \"false\"$'\n'ENABLE_SYSCTL_TUNING:\ \"true\"$'\n'ENV_TIMESTAMP:\ \"2020-08-10T04:17:15\+00:00\"$'\n'EXTRA_DOCKER_OPTS:\ --insecure-registry\ 10.0.0.0/8$'\n'FEATURE_GATES:\ DynamicKubeletConfig=false,TaintBasedEvictions=false,RotateKubeletServerCertificate=true,ExperimentalCriticalPodAnnotation=true$'\n'FLUENTD_CONTAINER_RUNTIME_SERVICE:\ containerd$'\n'HEAPSTER_USE_NEW_STACKDRIVER_RESOURCES:\ \"true\"$'\n'HEAPSTER_USE_OLD_STACKDRIVER_RESOURCES:\ \"false\"$'\n'HPA_USE_REST_CLIENTS:\ \"true\"$'\n'INSTANCE_PREFIX:\ gke-terraria-world-1-d04a2a53$'\n'KUBE_ADDON_REGISTRY:\ k8s.gcr.io$'\n'KUBE_CLUSTER_DNS:\ 10.39.240.10$'\n'KUBE_DOCKER_REGISTRY:\ gke.gcr.io$'\n'KUBE_MANIFESTS_TAR_HASH:\ d669659b3716794bafc85a1808d5def16e536166$'\n'KUBE_MANIFESTS_TAR_URL:\ https://storage.googleapis.com/gke-release/kubernetes/release/v1.15.12-gke.2/kubernetes-manifests.tar.gz,https://storage.googleapis.com/gke-release-eu/kubernetes/release/v1.15.12-gke.2/kubernetes-manifests.tar.gz,https://storage.googleapis.com/gke-release-asia/kubernetes/release/v1.15.12-gke.2/kubernetes-manifests.tar.gz$'\n'KUBE_PROXY_TOKEN:\ UVceQoXpRIZnyLrXj1iX1YiHHfYxiKmNlqwDRUN-sgQ=$'\n'KUBELET_ARGS:\ --v=2\ --cloud-provider=gce\ --experimental-check-node-capabilities-before-mount=true$'\n'\ \ --experimental-mounter-path=/home/kubernetes/containerized_mounter/mounter\ --cert-dir=/var/lib/kubelet/pki/$'\n'\ \ --cni-bin-dir=/home/kubernetes/bin\ --kubeconfig=/var/lib/kubelet/kubeconfig\ --image-pull-progress-deadline=5m$'\n'\ \ --experimental-kernel-memcg-notification=true\ --max-pods=110\ --non-masquerade-cidr=0.0.0.0/0$'\n'\ \ --network-plugin=kubenet\ --node-labels=beta.kubernetes.io/fluentd-ds-ready=true,cloud.google.com/gke-nodepool=default-pool,cloud.google.com/gke-os-distribution=ubuntu$'\n'\ \ --volume-plugin-dir=/home/kubernetes/flexvolume\ --bootstrap-kubeconfig=/var/lib/kubelet/bootstrap-kubeconfig$'\n'\ \ --node-status-max-images=25\ --registry-qps=10\ --registry-burst=20$'\n'KUBELET_CERT:\ LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvRENDQWVTZ0F3SUJBZ0lRRU1BemlJa0J0SnhSN215SHR4aTBxVEFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlReFlqVTNNbUl6WVMwME0yVmxMVFE0TkRNdE9HTTJNaTA0T0RZek5XRmxObUpoTURJdwpIaGNOTWpBd09ERXdNRFF4TnpFMldoY05NalV3T0RBNU1EUXhOekUyV2pBU01SQXdEZ1lEVlFRREV3ZHJkV0psCmJHVjBNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTRSYWtSQXNRRmcrL0ducFEKM1dkZWlXY0VWK2RQVVBDeGhhWVNBcUxwL1pGL1oxZW0rQnhWUGxCcEFzd0dXcHYvQmZoKzArYVhkYmRlV3liawpnM09UVWh4ZG1aS0ZyOFhlbS9uWDFzc2FxTWMwZmVnRGdDM3lwN0JGeks0SGkzcytwcVpFMkhKandzL2xFRC94ClBxNmg5cW92V1lqcEJFcmg0T2ZGNVB1QnpHM0xmR0tReVIrNGsxbm1xRnphTXd3VEdMdGJLQ1NHNUFscWNnOWkKdnBFNVZCc09WMnExanEyMFJmU0p1SDF5ZHYrYkJNVFhVK0FFYmR4WDJHSzN6NFBHVHJGcG5IWFYyR1BPRWR3ZApNZC9wbWd5b3RIdXR1bzJIUndVUXIyeGRocS9ici9UZU5teXZaRVd0dkNhcWtQdGQzbklZK0xlK1FkeVN6WWV6Ck51K0M2UUlEQVFBQm96RXdMekFNQmdOVkhSTUJBZjhFQWpBQU1COEdBMVVkSXdRWU1CYUFGS0tiNk43M1d4Z0kKVnlsMUxoZlNQZTIvbmhXS01BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ2Z4T3lFeGg2emg1cU9FMTMwQ0xERQprMVJqWW5iQy91TmRma2JyQ1h5NExSbXhvTDZoWlFkV050dlZjWTRPVDIvNGJWbDVoeFRlRG1XUnpjbjBtQUVLCk5peUdZV2lwWWIvUUVBUHhwS291anpCQXlMR2tpT3NLSFJXV2krUFR6ZTRwVXQ5aCtDV094U2lLL3hhWkJNQWUKWkxMZHpZNDdUbWtrMnFoY2k1RDNkaHNTdHJaWHBxa2Y0MGJNRVdHRENFVFZCc1ZEeHVaaHNBeGVGTXo3VkxGRApJTUVHQW5ZUVRFV1ZLNHJNR216dVA5VW5xdEFzRVhocHFMc291M2RmSEwrYStBdllrMmVXMU1OcjZLb09IYUE2CjFzOHo1cy9iMVJvQ0xVL3NlaStOTXJzNkdjM0ROV0QvMzRRREdhcHU2Si9DTmVQb2pCd3c4b0JuTDNBbzY4WDUKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=$'\n'KUBELET_KEY:\ LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBNFJha1JBc1FGZysvR25wUTNXZGVpV2NFVitkUFVQQ3hoYVlTQXFMcC9aRi9aMWVtCitCeFZQbEJwQXN3R1dwdi9CZmgrMCthWGRiZGVXeWJrZzNPVFVoeGRtWktGcjhYZW0vblgxc3NhcU1jMGZlZ0QKZ0MzeXA3QkZ6SzRIaTNzK3BxWkUySEpqd3MvbEVEL3hQcTZoOXFvdldZanBCRXJoNE9mRjVQdUJ6RzNMZkdLUQp5Uis0azFubXFGemFNd3dUR0x0YktDU0c1QWxxY2c5aXZwRTVWQnNPVjJxMWpxMjBSZlNKdUgxeWR2K2JCTVRYClUrQUViZHhYMkdLM3o0UEdUckZwbkhYVjJHUE9FZHdkTWQvcG1neW90SHV0dW8ySFJ3VVFyMnhkaHEvYnIvVGUKTm15dlpFV3R2Q2Fxa1B0ZDNuSVkrTGUrUWR5U3pZZXpOdStDNlFJREFRQUJBb0lCQURXOUFKbklKRjZJQXVHUQo2MFo0dTk3RkRBbnFqUXF2ZEVxS3RBa1NHUmd6U1A0RXRMWE9tZUZuTkRMNVA5a1pIa0V3S3lOdkRhRUtsc25mClZyWTFmU29nNEkzZUovR25wWGFLcHllK1ZNNlB4SzM4bXYxYXV2Q2pDbjhMMjN4Ry85V3NvNG9qZ1VMTS9JeXQKSDIwT0oxZnJHS1BoSm5TaVpod2FhYW82QzZxZzV4dXAwU2Z3aTVITVVHTDFrMGMzc0xvQ3QxR29ndFk1T3pqYgo2WnlxMWVUUEhYcml1OGIvSmQvOGQvRHkyR0NDSHJBUU4rNzdVTXI2cGE4L1p0b3ZBOC8yQWhSYWpOMzFTRUVzClBlTCtyZ25IUTVUWmtEaE9sZE9ULytPUFlySkdKMzFiSUlMTXJXZjFEOXhDV0lsS0hxS1dkUjFkZFJaZHJqZTgKR0JERGFac0NnWUVBL3dvSURKRWdLeW1mUDgybkdFWkliK1AvbHB5dU5jWE5mQ21TV3BMZnhmZ2QvS08vby9LVwpVN0JISWQ5K0lUMytOcVFqUnhORERuL2YrRXlFTjB0ZTRhWHN0VktoWHFHUkV3bS9oOWRzSnRtcUtxTFBWWjhICjM1U3B0SWQySDk4RUpkNkxPVlBJTFA3WkVKSERUL2hrSG1xSkNubkpVOWNydGNWTEgvWGN4d01DZ1lFQTRlKzUKaGJ4MUlsSkxEaVBTYVNpMGZObno0L1BrWTR1a2FvZmpFQWZ6emJySmI0MGlLVkJTanhMYWZhemJoNFZLZWNSaApaTTh6REZzOW1wSjROMityZmJSNlcyUDVOY0J2NjR0U21aSWF6WVNlbFJKSXp0UWRsZXpxNEJQcUlRK0hHTnFiCkhYN0c5cG40UHU4ODZub01yd1N6S0pobGs4SEhWN3lOTE5lQVJLTUNnWUVBem5ZU2VnbnFIc2I5RWl1cnYyejIKS3c1SjFHVldhbFdNdVp6MXk3am15bDdIOThPZjJsc0I4eEhiSThMSFdxWFM2KzBJV2Z0djU0Y0Jpd0oyYmtUbgp0SWdjRGRXc3FPem1ncUQ3bWo1OFlSOElNS2ZJYktubk44b2piKy9SWW8rcHpmWlFnc0llWkw2U2ZtVmgxWlZoCmgzWDdKcTNjbTdDdXcrSEpwVC9sMEgwQ2dZRUF5cnBrdUdocW5ocERPSFBTR0FPck42QUZwRk95YWRQaCtxamwKaC92cXVuM1F3MlJhODhFYjR6OGloOFB6MDMwNVgxdGpuS1lDZ3lMWGV2dlVITUg1bWJpNFZZcTJFWklUbXNHUApvemFqRUNmZ2Q1aEpkalNFTzRPekdNOGx0UGFPM1RGQ0g4d2kwU0ZFeTR1MUdCdmRoNmxxN0pFYUMrUERiNmxDCjc2cUtjSXNDZ1lFQTg5VnZKTkxwd0xkdFJkVnl0YnpCcElESVJQY3QweTFYd0x2REpJbUdkQVRxa3d2cVhlZkkKTmVScFJtYXlOZlVnNlZMVUFLaEhWTHJWWnVTQks5NVdpUEFpZFNycjN2WVBsNTBQK0o3eHAxN2VDQkVEVU14RQo2S1czMDR3TTJhVWY3YnNCRjd6WU1JWGdUakhuZVNZK0xBS21yWDV4aUFkN3ovOVBYQzlpV2dnPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=$'\n'KUBERNETES_MASTER:\ \"false\"$'\n'KUBERNETES_MASTER_NAME:\ 34.68.65.118$'\n'LOGGING_DESTINATION:\ \"\"$'\n'LOGGING_STACKDRIVER_RESOURCE_TYPES:\ \"\"$'\n'MONITORING_FLAG_SET:\ \"true\"$'\n'NETWORK_PROVIDER:\ kubenet$'\n'NODE_LOCAL_SSDS_EXT:\ \"\"$'\n'NODE_PROBLEM_DETECTOR_TOKEN:\ MIkhxhcPhIqXV7wLd5ns4Zm2O2fHb3IyuPfgCAJNGTM=$'\n'NON_MASQUERADE_CIDR:\ 0.0.0.0/0$'\n'REMOUNT_VOLUME_PLUGIN_DIR:\ \"true\"$'\n'REQUIRE_METADATA_KUBELET_CONFIG_FILE:\ \"true\"$'\n'SALT_TAR_HASH:\ \"\"$'\n'SALT_TAR_URL:\ https://storage.googleapis.com/gke-release/kubernetes/release/v1.15.12-gke.2/kubernetes-salt.tar.gz,https://storage.googleapis.com/gke-release-eu/kubernetes/release/v1.15.12-gke.2/kubernetes-salt.tar.gz,https://storage.googleapis.com/gke-release-asia/kubernetes/release/v1.15.12-gke.2/kubernetes-salt.tar.gz$'\n'SERVER_BINARY_TAR_HASH:\ a016a715584cc797c4d9c2c3c8ae34d0fb3837db$'\n'SERVER_BINARY_TAR_URL:\ https://storage.googleapis.com/gke-release/kubernetes/release/v1.15.12-gke.2/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/gke-release-eu/kubernetes/release/v1.15.12-gke.2/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/gke-release-asia/kubernetes/release/v1.15.12-gke.2/kubernetes-server-linux-amd64.tar.gz$'\n'SERVICE_CLUSTER_IP_RANGE:\ 10.39.240.0/20$'\n'STACKDRIVER_ENDPOINT:\ https://logging.googleapis.com$'\n'SYSCTL_OVERRIDES:\ \"\"$'\n'VOLUME_PLUGIN_DIR:\ /home/kubernetes/flexvolume$'\n'ZONE:\ us-central1-b$'\n',@gci-update-strategy=update_disabled,@gci-ensure-gke-docker=true,@enable-oslogin=false,@cluster-uid=d04a2a53aa4c2e046529e5f71e809ef5767380a8872bb550f7fd0d755f15beda,@cluster-location=us-central1-b,@user-data=\#cloud-config$'\n'$'\n'write_files:$'\n'\ \ -\ path:\ /etc/systemd/system/kube-node-installation.service$'\n'\ \ \ \ permissions:\ 0644$'\n'\ \ \ \ owner:\ root$'\n'\ \ \ \ content:\ \|$'\n'\ \ \ \ \ \ \[Unit\]$'\n'\ \ \ \ \ \ Description=Download\ and\ install\ k8s\ binaries\ and\ configurations$'\n'\ \ \ \ \ \ After=network-online.target$'\n'$'\n'\ \ \ \ \ \ \[Service\]$'\n'\ \ \ \ \ \ Type=oneshot$'\n'\ \ \ \ \ \ RemainAfterExit=yes$'\n'\ \ \ \ \ \ ExecStartPre=/bin/mkdir\ -p\ /home/kubernetes/bin$'\n'\ \ \ \ \ \ ExecStartPre=/bin/mount\ --bind\ /home/kubernetes/bin\ /home/kubernetes/bin$'\n'\ \ \ \ \ \ ExecStartPre=/bin/mount\ -o\ remount,exec\ /home/kubernetes/bin$'\n'\ \ \ \ \ \ \#\ Use\ --retry-connrefused\ opt\ only\ if\ it\'s\ supported\ by\ curl.$'\n'\ \ \ \ \ \ ExecStartPre=/bin/bash\ -c\ \'OPT=\"\"\;\ if\ curl\ --help\ \|\ grep\ -q\ --\ \"--retry-connrefused\"\;\ then\ OPT=\"--retry-connrefused\"\;\ fi\;\ /usr/bin/curl\ --fail\ --retry\ 5\ --retry-delay\ 3\ \$OPT\ --silent\ --show-error\ -H\ \"X-Google-Metadata-Request:\ True\"\ -o\ /home/kubernetes/bin/configure.sh\ http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\'$'\n'\ \ \ \ \ \ ExecStartPre=/bin/chmod\ 544\ /home/kubernetes/bin/configure.sh$'\n'\ \ \ \ \ \ ExecStart=/home/kubernetes/bin/configure.sh$'\n'$'\n'\ \ \ \ \ \ \[Install\]$'\n'\ \ \ \ \ \ WantedBy=kubernetes.target$'\n'$'\n'\ \ -\ path:\ /etc/systemd/system/kube-node-configuration.service$'\n'\ \ \ \ permissions:\ 0644$'\n'\ \ \ \ owner:\ root$'\n'\ \ \ \ content:\ \|$'\n'\ \ \ \ \ \ \[Unit\]$'\n'\ \ \ \ \ \ Description=Configure\ kubernetes\ node$'\n'\ \ \ \ \ \ After=kube-node-installation.service$'\n'$'\n'\ \ \ \ \ \ \[Service\]$'\n'\ \ \ \ \ \ Type=oneshot$'\n'\ \ \ \ \ \ RemainAfterExit=yes$'\n'\ \ \ \ \ \ ExecStartPre=/bin/chmod\ 544\ /home/kubernetes/bin/configure-helper.sh$'\n'\ \ \ \ \ \ ExecStart=/home/kubernetes/bin/configure-helper.sh$'\n'$'\n'\ \ \ \ \ \ \[Install\]$'\n'\ \ \ \ \ \ WantedBy=kubernetes.target$'\n'$'\n'\ \ -\ path:\ /etc/systemd/system/kube-container-runtime-monitor.service$'\n'\ \ \ \ permissions:\ 0644$'\n'\ \ \ \ owner:\ root$'\n'\ \ \ \ content:\ \|$'\n'\ \ \ \ \ \ \[Unit\]$'\n'\ \ \ \ \ \ Description=Kubernetes\ health\ monitoring\ for\ container\ runtime$'\n'\ \ \ \ \ \ After=kube-node-configuration.service$'\n'$'\n'\ \ \ \ \ \ \[Service\]$'\n'\ \ \ \ \ \ Restart=always$'\n'\ \ \ \ \ \ RestartSec=10$'\n'\ \ \ \ \ \ RemainAfterExit=yes$'\n'\ \ \ \ \ \ RemainAfterExit=yes$'\n'\ \ \ \ \ \ ExecStartPre=/bin/chmod\ 544\ /home/kubernetes/bin/health-monitor.sh$'\n'\ \ \ \ \ \ ExecStart=/home/kubernetes/bin/health-monitor.sh\ container-runtime$'\n'$'\n'\ \ \ \ \ \ \[Install\]$'\n'\ \ \ \ \ \ WantedBy=kubernetes.target$'\n'$'\n'\ \ -\ path:\ /etc/systemd/system/kubelet-monitor.service$'\n'\ \ \ \ permissions:\ 0644$'\n'\ \ \ \ owner:\ root$'\n'\ \ \ \ content:\ \|$'\n'\ \ \ \ \ \ \[Unit\]$'\n'\ \ \ \ \ \ Description=Kubernetes\ health\ monitoring\ for\ kubelet$'\n'\ \ \ \ \ \ After=kube-node-configuration.service$'\n'$'\n'\ \ \ \ \ \ \[Service\]$'\n'\ \ \ \ \ \ Restart=always$'\n'\ \ \ \ \ \ RestartSec=10$'\n'\ \ \ \ \ \ RemainAfterExit=yes$'\n'\ \ \ \ \ \ RemainAfterExit=yes$'\n'\ \ \ \ \ \ ExecStartPre=/bin/chmod\ 544\ /home/kubernetes/bin/health-monitor.sh$'\n'\ \ \ \ \ \ ExecStart=/home/kubernetes/bin/health-monitor.sh\ kubelet$'\n'$'\n'\ \ \ \ \ \ \[Install\]$'\n'\ \ \ \ \ \ WantedBy=kubernetes.target$'\n'$'\n'\ \ -\ path:\ /etc/systemd/system/kube-logrotate.timer$'\n'\ \ \ \ permissions:\ 0644$'\n'\ \ \ \ owner:\ root$'\n'\ \ \ \ content:\ \|$'\n'\ \ \ \ \ \ \[Unit\]$'\n'\ \ \ \ \ \ Description=Hourly\ kube-logrotate\ invocation$'\n'$'\n'\ \ \ \ \ \ \[Timer\]$'\n'\ \ \ \ \ \ OnCalendar=hourly$'\n'$'\n'\ \ \ \ \ \ \[Install\]$'\n'\ \ \ \ \ \ WantedBy=kubernetes.target$'\n'$'\n'\ \ -\ path:\ /etc/systemd/system/kube-logrotate.service$'\n'\ \ \ \ permissions:\ 0644$'\n'\ \ \ \ owner:\ root$'\n'\ \ \ \ content:\ \|$'\n'\ \ \ \ \ \ \[Unit\]$'\n'\ \ \ \ \ \ Description=Kubernetes\ log\ rotation$'\n'\ \ \ \ \ \ After=kube-node-configuration.service$'\n'$'\n'\ \ \ \ \ \ \[Service\]$'\n'\ \ \ \ \ \ Type=oneshot$'\n'\ \ \ \ \ \ ExecStart=-/usr/sbin/logrotate\ /etc/logrotate.conf$'\n'$'\n'\ \ \ \ \ \ \[Install\]$'\n'\ \ \ \ \ \ WantedBy=kubernetes.target$'\n'$'\n'\ \ -\ path:\ /etc/systemd/system/kubernetes.target$'\n'\ \ \ \ permissions:\ 0644$'\n'\ \ \ \ owner:\ root$'\n'\ \ \ \ content:\ \|$'\n'\ \ \ \ \ \ \[Unit\]$'\n'\ \ \ \ \ \ Description=Kubernetes$'\n'$'\n'\ \ \ \ \ \ \[Install\]$'\n'\ \ \ \ \ \ WantedBy=multi-user.target$'\n'$'\n'runcmd:$'\n'\ -\ systemctl\ daemon-reload$'\n'\ -\ systemctl\ enable\ kube-node-installation.service$'\n'\ -\ systemctl\ enable\ kube-node-configuration.service$'\n'\ -\ systemctl\ enable\ kube-container-runtime-monitor.service$'\n'\ -\ systemctl\ enable\ kubelet-monitor.service$'\n'\ -\ systemctl\ enable\ kube-logrotate.timer$'\n'\ -\ systemctl\ enable\ kube-logrotate.service$'\n'\ -\ systemctl\ enable\ kubernetes.target$'\n'\ -\ systemctl\ start\ kubernetes.target$'\n',@startup-script=sudo\ apt-get\ update\ -y$'\n'sudp\ apt\ install\ wget$'\n'sudo\ mkdir\ /tmp/world$'\n'touch\ test.txt$'\n'wget\ https://storage.cloud.google.com/\$DEVSHELL_PROJECT_ID-\$REGION-\$NAME/\$WORLD\ /tmp/world/world/\$WORLD --can-ip-forward --maintenance-policy=MIGRATE --service-account=206411481057-compute@developer.gserviceaccount.com --scopes=https://www.googleapis.com/auth/cloud-platform --region=us-central1 --tags=gke-terraria-world-1-d04a2a53-node --image=ubuntu-gke-1804-1-15-v20200330 --image-project=ubuntu-os-gke-cloud --boot-disk-size=100GB --boot-disk-type=pd-standard --boot-disk-device-name=gke-terraria-world-1-default-pool-b9eda239-1 --no-shielded-secure-boot --shielded-vtpm --shielded-integrity-monitoring --labels=goog-gke-node= --reservation-affinity=any
